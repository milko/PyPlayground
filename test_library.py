from library import *

def make_directed_graph():
    g = Graph()
    g.connectNodes("A", "B", 4)
    g.connectNodes("A", "E", 3)
    g.connectNodes("B", "C", 6)
    g.connectNodes("B", "D", 3)
    g.connectNodes("E", "D", 4)
    g.connectNodes("E", "F", 3)
    g.connectNodes("C", "H", 8)
    g.connectNodes("D", "G", 2)
    g.connectNodes("G", "H", 3)
    g.connectNodes("F", "G", 6)
    g.connectNodes("F", "I", 4)
    g.connectNodes("I", "J", 4)
    g.connectNodes("I", "K", 5)
    g.connectNodes("J", "L", 2)
    g.connectNodes("K", "L", 2)
    g.connectNodes("K", "N", 4)
    g.connectNodes("H", "J", 5)
    g.connectNodes("H", "M", 3)
    return g

def make_undirected_graph():
    g = Graph()
    g.relateNodes("A", "B", 4)
    g.relateNodes("A", "E", 3)
    g.relateNodes("B", "C", 6)
    g.relateNodes("B", "D", 3)
    g.relateNodes("E", "D", 4)
    g.relateNodes("E", "F", 3)
    g.relateNodes("C", "H", 8)
    g.relateNodes("D", "G", 2)
    g.relateNodes("G", "H", 3)
    g.relateNodes("F", "G", 6)
    g.relateNodes("F", "I", 4)
    g.relateNodes("I", "J", 4)
    g.relateNodes("I", "K", 5)
    g.relateNodes("J", "L", 2)
    g.relateNodes("K", "L", 2)
    g.relateNodes("K", "N", 4)
    g.relateNodes("H", "J", 5)
    g.relateNodes("H", "M", 3)
    return g

print("\nQueue")
q = Queue()
q.put("A")
q.put("B")
q.put("C")
print(str(q))
print("===========================")

x = q.pop()
print(str(q))
x = q.pop()
print(str(q))
x = q.pop()
print(str(q))
print("===========================")

print("\nStack")
q = Stack()
q.put("A")
q.put("B")
q.put("C")
print(str(q))
print("===========================")

x = q.pop()
print(str(q))
x = q.pop()
print(str(q))
x = q.pop()
print(str(q))
print("===========================")

print("\nHeap")
q = Heap()
q.put("A", 80)
q.put("B", 40)
q.put("C", 60)
print(str(q))
print("===========================")
print(str(q.pop()))
print(str(q))
print(str(q.pop()))
print(str(q))
print(str(q.pop()))
print(str(q))
print("===========================")

print("\nGraph Directional")
g = make_directed_graph()
print(str(g))
print("===========================")

print("\nLeast nodes")
x = g.leastNodes("A", "L")
print(str(x))
print("===========================")

print("\nLeast cost")
x = g.leastCost("A", "L")
print(str(x))
print("===========================")

print("\nBFS")
x = list(g.bfs("A", "L"))
for p in x:
    print(str(g.makePath(p)))
print("===========================")

print("\nDFS")
x = list(g.dfs("A", "L"))
for p in x:
    print(str(g.makePath(p)))
print("===========================")

print("\nUFS")
x = g.ucs("A", "L")
print(str(g.makePath(x)))

print("\nGraph Bidirectional")
g = make_undirected_graph()
print(str(g))
print("===========================")

print("\nLeast nodes")
x = g.leastNodes("A", "L")
print(str(x))
print("===========================")

print("\nLeast cost")
x = g.leastCost("A", "L")
print(str(x))
print("===========================")

print("\nBFS")
x = list(g.bfs("A", "L"))
for p in x:
    print(str(g.makePath(p)))
print("===========================")

print("\nDFS")
x = list(g.dfs("A", "L"))
for p in x:
    print(str(g.makePath(p)))
print("===========================")

print("\nUFS")
x = g.ucs("A", "L")
print(str(g.makePath(x)))
